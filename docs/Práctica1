# üìö Pr√°ctica 1 - Pr√°ctica_Comunicaci√≥nSerial_NeoPixel

> El programa crea un efecto de parpedeo infinito de algun color que sepamos su "rgb", donde las personas no alcanzamos a distinguir. Ocupamos conceptos b√°sicos de control de  LEDs RGB y temporizaci√≥n con delays. Es ideal si no comprendes el funcionamiento de los NeoPixels.
---

## 1) Resum√©n üìå

- **Equipo / Autor(es):** Emmanuel Angeles Barreto
- **Curso / Asignatura:** Elementos Programables II  
- **Fecha:** 25/08/25  

---

## 2) C√≥digo ‚å®Ô∏è

```bash
# ========================================
 #LIBRER√çAS NECESARIAS
# ========================================
 #Desde el primer include hasta el "define" llevan #
include <Adafruit_NeoPixel.h>  // Librer√≠a para controlar LEDs NeoPixel RGB direccionables
ifdef __AVR__
   include <avr/power.h>  // Librer√≠a espec√≠fica para placas AVR (optimizaci√≥n de energ√≠a)
endif

 #========================================
 #CONFIGURACI√ìN DE CONSTANTES
 #========================================
define PIN  8          // Pin digital del ESP32 donde est√° conectado el LED NeoPixel
define NUMPIXELS 1     // Cantidad total de LEDs en la tira (en este caso solo 1)

# ========================================
# INICIALIZACI√ìN DEL OBJETO NEOPIXEL
# ========================================
# Par√°metros: cantidad de LEDs, pin de datos, tipo de LED (GRB) + frecuencia (800KHz)
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

# ========================================
# CONFIGURACI√ìN INICIAL (se ejecuta una sola vez)
# ========================================
void setup(){
  Serial.begin(115200);  // Inicializar comunicaci√≥n serial a 115200 baudios para debug
  pixels.begin();        // Inicializar el sistema NeoPixel (configurar pin como salida)
}

# ========================================
# BUCLE PRINCIPAL (se ejecuta infinitamente)
# ========================================
void loop(){
  // Paso 1: Apagar el LED (poner todos los colores en 0)
  pixels.clear();
  
  # Paso 2: Configurar el color del LED en √≠ndice 0
  # Color morado: Rojo=122, Verde=0, Azul=122
  # Valores van de 0 (apagado) a 255 (m√°ximo brillo)
  pixels.setPixelColor(0, pixels.Color(122, 0, 122));
  
  # Paso 3: Enviar los datos al LED para que muestre el color configurado
  pixels.show();
  
  # Paso 4: Mantener el LED encendido durante 700 milisegundos (0.7 segundos)
  delay(700);
  
  # El ciclo se repite: el LED se apaga brevemente y vuelve a encender, creando un efecto de parpadeo en color morado
}
```
---

# 3) Evidencias del resultado final üì∏

![Diagrama del sistema](recursos/imgs/practica1.jpg)

[VIDEO MUESTRA YT][doc-ref]

[doc-ref]: https://youtu.be/wxUKQ6KOWmY "Video muestra YT"


---
